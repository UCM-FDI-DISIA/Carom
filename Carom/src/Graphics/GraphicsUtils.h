#pragma once
#include <utility>
#include <box2D/box2D.h>
#include <vector>
#include <SDL.h>
#include "RNG_Manager.h"


using IntPair = std::pair<int,int>;


class GraphisUtils
{
public:
    static bool doPolygonsOverlap(const std::vector<b2Vec2>& verts1, const std::vector<b2Vec2>& verts2, float radius = 0.01f);

    // Compute alpha so that pixels outside of shape are set to alpha = 0
    static std::vector<uint8_t> computeAlphaMask(const std::vector<b2Vec2> &polyVerts, const SDL_Rect &rect, float polyRadius = 0.01f);

    /// @brief Generates polygons (vector of vertices) that don't overlap and are area (region) limited. Polygons are generated by generating vertex points from a random distance to a center limited by an interval.
    /// @param minRadius minimum distance of a point from the center
    /// @param maxRadius max distance of a point from the center
    /// @param n number of polygons
    /// @param m number of vertices (max = 8 for box2d)
    /// @param areaX top left x in pixels of a restriction area
    /// @param areaY top left y in pixels of a restriction area
    /// @param areaW width in pixels
    /// @param areaH height in pixels
    /// @param rng random number
    static std::vector<std::vector<b2Vec2>> generateNonOverlappingPolygons(
        float minRadius, float maxRadius, 
        int n, int m, 
        float areaX, float areaY, 
        float areaW, float areaH,
        RNG_Manager* rng);

    /// @brief Generates bounding boxes for polygons. Returns a rect that is clamped by an area and the center of this rect without clamp for propor rendering
    /// @param areaX top left x in pixels of a restriction area
    /// @param areaY top left y in pixels of a restriction area
    /// @param areaW width in pixels
    /// @param areaH height in pixels
    static std::pair<std::vector<SDL_Rect>, std::vector<b2Vec2>> generatePolygonBoundingBoxes(const std::vector<std::vector<b2Vec2>>& polygons, 
    int areaPosX, int areaPosY, 
    int areaWidth, int areaHeight);

    static std::pair<SDL_Rect, b2Vec2> generatePolygonBoundingBox(const std::vector<b2Vec2>& polygon, 
        int areaPosX, int areaPosY, 
        int areaWidth, int areaHeight);


    static b2Vec2 calculatePolygonCenter(const std::vector<b2Vec2>& polygon);

    static SDL_Rect generatePartialRect(SDL_Rect originalRect, SDL_Rect areaConstrain);

    static SDL_Rect getTopLeftRect(IntPair center, IntPair size);

    static SDL_Rect getCenterRect(IntPair pos, IntPair size);
    static SDL_Rect getCenterRect(const SDL_Rect& topleftRect);


    static std::vector<std::vector<b2Vec2>> extractPolygons(int n, int vert);
};